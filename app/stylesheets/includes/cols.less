.cols(){

	/**
	* In order to work around browsers' different rounding behaviours, we'll float 
	* the last column in a row to the right so the edge aligns. You can override 
	* that behaviour by adding class="end" in the last column. 
	* 
	* Idea taken from: 
	* http://foundation.zurb.com/docs/grid.php 
	* http://www.netmagazine.com/tutorials/building-modern-grid-system
	* 
	*/
	.col + .col:last-child { 
		.respond(@size, {
			float: right;
		});
	}

	.col + .col.end { 
		.respond(@size, {
			float: left; 
		});
	}

	//Cancel the left margin in the first item
	.row .col:first-child, 
	.row .row .col:first-child {
		margin-left: 0;
	}

	/*Column, generic*/
	.col {
		display: block;
		float: none;
		.respond(@size, {
			display: inline;
			float: left;
			min-height: 1px;
			position: relative;
			margin: 0 0 0 @gutter;
		});
	}

	.inline-col {
		display: inline-block;
		margin-left: @gutter;
		&.first {
			margin-left: 0;
		}
		&.middle {
			vertical-align: middle;
		}
		&.bottom {
			vertical-align: bottom;
		}
	}

	/*Columns widths and left margins*/
	.one {
		.respond(@size, {
			.columns(1);
		});
	}
	
	.two {
		.respond(@size, {
			.columns(2);
		});
	}

	.three {
		.respond(@size, {
			.columns(3);
		});
	}

	.four {
		.respond(@size, {
			.columns(4);
		});
	}

	.six {
		.respond(@size, {
			.columns(6);
		});
	}

	// .nestedcolumns(children, parent);
	.six .two {
		.nestedcolumns(2, 6);
	}

	.six .three {
		.nestedcolumns(3, 6);
	}

	.six .four {
		.nestedcolumns(4, 6);
	}

}